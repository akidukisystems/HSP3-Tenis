
    #include "cfg.as"
    #include "msglib.as"
    #include "bool.as"

    #include "hspmath.as"

    #enum x = 0
    #enum y

    #define racket 100
    #define racketspace 20
    #define racketthickness 20
    #define ballsize 12

    #define movespeed 2

    screen 1, 320, 240, 2
	title "認証"
	gsel 0, 1

    title "3年 電気電子科 文化祭Aグループ"

    debug_mode = false

    if ( dir_cmdline == "enableDebug" ) : debug_mode = true

    onexit gosub *exiting

*start

    cls

    uniqueID = ""+ strf( "%02d%02d%02d%02d%02d", gettime(1), gettime(3), gettime(4), gettime(5), gettime(6) )
    name = ""

    font msgothic, 20
    mes "テニスゲーム"

    font msgothic, 12
    pos 260, 8
	mes "Version 1.0"
	mes "3年 電気電子科　文化祭Aグループ\n\n"

    pos 0, ginfo_cy
	objsize 256, 32
	button goto "開始", *game

	font msgothic, 16
	mes "\n設定"
	objsize 64, 24
	pos 0, ginfo_cy : mes "プレイヤー名     : ", 1 : input name, 128, 24, 16
	pos 0, ginfo_cy : mes "プレイヤーコード : "+ uniqueID +"", 1

	pos 0, ginfo_cy +32
	mes "操作方法"
	mes "矢印キー（上下）で移動"
    mes " ボールを打ち返してください\n 打ち返したところが ラケットの中心に近いほど、多くスコアをもらえます。\n"
	mes "プレイ後、プレイヤー名とスコア、プレイヤーコードが、集計目的で記録されます。"

    stop

*game

    cls

    my_pos = 0
    enemy_pos = 0

    ball_pos.x = 400.0
    ball_pos.y = 400.0
    ball_vector = 2

    ball_speed = 1.0
    ball_acceleration = 0.08

    isAiEnable = false

    isLockedScore = false

    nowkey = 0

    score = 0
    if ( name == "" ) : name = "PLAYER"

    font "MS Gothic", 12

    repeat -1

        // キー入力

        getkey nowkey, 38   ; 上矢印
        if ( nowkey ) {

            if ( my_pos > 0 ) : my_pos -= movespeed
            
        }

        getkey nowkey, 40   ; 下矢印
        if ( nowkey ) {

            if ( my_pos < 480 - racket ) : my_pos += movespeed
            
        }

        // AI

        gosub *l_enemyai

        if ( stat ) {
            
            isAiEnable = false

        } else {

            isAiEnable = true

        }

        // ボール移動

        switch ball_vector

        case 1  ; 右上

            ball_pos.x += ball_speed
            ball_pos.y -= ball_speed

        swbreak

        case 2 ; 左上

            ball_pos.x -= ball_speed
            ball_pos.y -= ball_speed

        swbreak

        case 3  ; 左下

            ball_pos.x -= ball_speed
            ball_pos.y += ball_speed

        swbreak

        case 4  ; 右下

            ball_pos.x += ball_speed
            ball_pos.y += ball_speed

        swbreak

        swend

        // 自分ラケット衝突判定

        if ( ball_pos.x <= racketspace + racketthickness ) {    ; ボールはラケットの移動軸上にあるか

            if ( ( ball_pos.y >= my_pos ) and ( ball_pos.y <= ( my_pos + racket ) ) ) { ; ボールはラケットの範囲内にあるか

                if ( isLockedScore == false ) { ; スコア変更がロックされていないか
                    
                    score += 100
                    score += abs( abs( int( ball_pos.y ) - my_pos - racket / 2 ) - 50 ) ; ラケット中央に近い分だけスコア加算
                    isLockedScore = true

                }

                // ボール跳ね返す
                switch ball_vector

                    case 1

                        ball_vector = 2

                    swbreak

                    case 2

                        ball_vector = 1

                    swbreak

                    case 3

                        ball_vector = 4

                    swbreak

                    case 4

                        ball_vector = 3

                    swbreak
                
                swend

            }

        }

        // 敵ラケット衝突判定

        if ( int( ball_pos.x ) >= 640 - racketspace - racketthickness ) {

            if ( ( int( ball_pos.y)  >= enemy_pos ) and ( int( ball_pos.y ) <= ( enemy_pos + racket ) ) ) {

                ball_speed += ball_acceleration     ; ボール加速
                isLockedScore = false               ; スコアロック解除

                // ボール跳ね返す
                switch ball_vector

                    case 1

                        ball_vector = 2

                    swbreak

                    case 2

                        ball_vector = 1

                    swbreak

                    case 3

                        ball_vector = 4

                    swbreak

                    case 4

                        ball_vector = 3

                    swbreak
                
                swend

            }

        }

        // 自分壁当たり判定

        if ( int( ball_pos.x ) <= ballsize ) {

            font "", 48
            color : pos 192, 52
            mes "GAME OVER"

            font "", 48
            color 192, 0, 0 : pos 190, 50
            mes "GAME OVER"

            onkey *continue_game

            redraw 1

            stop

        }

        // 敵壁当たり判定

        if ( int( ball_pos.x ) >= 640 - ballsize ) {

            font "", 48
            color : pos 192, 52
            mes "GAME OVER"

            font "", 48
            color 192, 0, 0 : pos 190, 50
            mes "GAME OVER"

            onkey *continue_game

            redraw 1

            stop

        }

        // 上下壁判定

        if ( ( int( ball_pos.y ) - ballsize <= 0 ) or ( int( ball_pos.y ) + ballsize > 480 ) ) {

            ; 跳ね返す
            switch ball_vector

                case 1

                    ball_vector = 4

                swbreak

                case 2

                    ball_vector = 3

                swbreak

                case 3

                    ball_vector = 2

                swbreak

                case 4

                    ball_vector = 1

                swbreak
            
            swend

        }

        // 描画

        redraw 0

            color 255, 255, 255
            boxf

            color 0, 0, 0
            boxf racketspace, my_pos, racketspace + racketthickness, my_pos + racket

            color 0, 0, 0
            boxf 640 - racketspace, enemy_pos, 640 - racketspace - racketthickness, enemy_pos + racket

            circle int( ball_pos.x ) -ballsize, int( ball_pos.y ) -ballsize, int( ball_pos.x ) +ballsize, int( ball_pos.y ) +ballsize

            if ( debug_mode ) {

                color
                pos 0, 270
                mes " name  : "+ name
                mes " score : "+ score
                mes "General"
                mes " Ball Vector      : "+ ball_vector
                mes " My racket-pos    : "+ my_pos
                mes " Enemy racket-pos : "+ enemy_pos
                mes " isLockedScore    : "+ typebool( isLockedScore )
                mes " ball-speed       : "+ ball_speed
                mes "AI"
                mes " isEnable             : "+ typebool( isAiEnable )
                mes " Racket-Ball distance : "+ racket_ball_distance
                mes " Reached-pos(+)       : "+ ( ball_pos.y + racket_ball_distance )
                mes " Reached-pos(-)       : "+ ( ball_pos.y - racket_ball_distance )

            } else {

                color : pos 100, 10
                mes "NAME : "+ name +", SCORE : "+ score

            }
        

        redraw 1

        await 5

    loop

    stop

*l_enemyai

    // ラケットとボールのx座標の距離を測る
    racket_ball_distance = 640 - racketspace - racketthickness - int( ball_pos.x )

    // ボールがあっち行ってるならサボる
    if ( ( ball_vector == 2 ) or ( ball_vector == 3 ) ) : return 1

    // ボールこっち来とるわ！
    if ( ball_vector == 1 ) {

        // ボールの着弾地点 (ball_pos.y - racket_ball_distance) のところにラケットがなかったら、そこに向かって移動
        if ( ( ( ball_pos.y - racket_ball_distance ) <= enemy_pos + racket * 1/5 ) or ( ( ball_pos.y - racket_ball_distance ) >= enemy_pos + racket * 4/5 ) ) {
            
            if ( enemy_pos > 0 ) : enemy_pos -= movespeed

        } 

    }

    if ( ball_vector == 4 ) {

        // ボールの着弾地点 (ball_pos.y + racket_ball_distance) のところにラケットがなかったら、そこに向かって移動
        if ( ( ( ball_pos.y + racket_ball_distance ) != enemy_pos + racket * 1/5 ) and ( ( ball_pos.y + racket_ball_distance ) >= enemy_pos + racket * 4/5 ) ) {
            
            if ( enemy_pos <= 480 - racket ) : enemy_pos += movespeed

        }

    }

    return 0




*continue_game

    key_val = wparam
    if ( ( key_val != 27 ) and ( key_val != 112 ) ) : stop	// EscかF1の時以外は動かない

    onkey 0

    gsel 1, 1 : cls
    mes "管理者用パスワードを入力してください"	// めっせじ

    authtyping = ""
    input authtyping, 320, 20, 0

    hInput = objinfo(stat, 2)				// パスワード非表示
    sendmsg hInput, $CC, '*'

    button goto "決定", *continue_game_pwcheck
    button goto "キャンセル", *cancel

    stop

*cancel

    gsel 1, -1								// ウィンドウを隠す
    gsel 0, 1

    onkey 1

    stop

*continue_game_pwcheck

    if ( authtyping != "denki" ) {			// パスワード指定　ハードコーディングだけど許せ

        stop

    }

    gsel 1, -1								// ウィンドウを隠す
    gsel 0, 1

    if ( key_val == 27 ) {					// セーブデータを作る

        savedata = ""
        notesel savedata
        noteload "list.txt"
        noteadd ""+ uniqueID +","+ name +","+ score, -1, 0
        notesave "list.txt"

        goto *start

    }

    if ( key_val == 112 ) : goto *start

    onkey 1
    stop

*keycheck

    if ( wparam == 112 ) {

        if ( debug ) {

            debug = 0

        } else {

            debug = 1

        }

    }

    if ( wparam == 32 ) {

        baria = 1

    }

    return

*exiting

    if ( ginfo_act == 1 ) {
        
        gsel 1, -1								// ウィンドウを隠す
        gsel 0, 1

        onkey 1

        return

    }

    end

